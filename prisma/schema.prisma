generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  items    PlaidItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PlaidItem {
  id          String   @id @default(cuid())
  userId      String
  itemId      String   @unique
  accessToken String
  institutionId String?
  institutionName String?
  status      String   @default("active") // active, error, expired, disconnected
  lastSyncAt  DateTime?
  errorCode   String?
  errorMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts    CreditCard[]
  transactions Transaction[]

  @@map("plaid_items")
}

model CreditCard {
  id                String   @id @default(cuid())
  plaidItemId       String
  accountId         String   @unique
  name              String
  officialName      String?
  subtype           String?
  mask              String?
  balanceCurrent    Float?
  balanceAvailable  Float?
  balanceLimit      Float?
  isoCurrencyCode   String?
  lastStatementIssueDate DateTime?
  lastStatementBalance   Float?
  minimumPaymentAmount   Float?
  nextPaymentDueDate     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  plaidItem    PlaidItem      @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  aprs         APR[]
  billingCycles BillingCycle[]

  @@map("credit_cards")
}

model APR {
  id                String  @id @default(cuid())
  creditCardId      String
  aprType           String
  aprPercentage     Float
  balanceSubjectToApr Float?
  interestChargeAmount Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  creditCard CreditCard @relation(fields: [creditCardId], references: [id], onDelete: Cascade)

  @@map("aprs")
}

model BillingCycle {
  id                String   @id @default(cuid())
  creditCardId      String
  startDate         DateTime
  endDate           DateTime
  statementBalance  Float?
  minimumPayment    Float?
  dueDate          DateTime?
  totalSpend       Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creditCard CreditCard @relation(fields: [creditCardId], references: [id], onDelete: Cascade)

  @@map("billing_cycles")
}

model Transaction {
  id                String   @id @default(cuid())
  plaidItemId       String
  creditCardId      String?
  transactionId     String   @unique
  amount            Float
  isoCurrencyCode   String?
  date              DateTime
  authorizedDate    DateTime?
  name              String
  merchantName      String?
  category          String?
  categoryId        String?
  subcategory       String?
  accountOwner      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  plaidItem  PlaidItem   @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  creditCard CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)

  @@map("transactions")
}